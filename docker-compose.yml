version: '3'
services:

  nginx:
    image: nginx
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - ${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    #network_mode: "host" 
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=10d
      - --storage.tsdb.wal-compression
      - --web.enable-lifecycle
      - --web.listen-address=0.0.0.0:9090
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-remote-write-receiver
      - --web.external-url=/prometheus
    ports:
      - 9090:9090
    volumes:
      - ${PWD}/prometheus/etc:/etc/prometheus
      - prometheus-data:/prometheus

  #  prometheus-pushgateway:
  #  image: prom/pushgateway
  #  container_name: pushgateway
  #  restart: always
  #  command:
  #    - '--web.listen-address=:9991'
  #    - '--push.disable-consistency-check'
  #    - '--persistence.interval=5m'
  #  ports:
  #    - 9991:9991

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    depends_on: 
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      # - GF_SERVER_PROTOCOL=http
      # - GF_SERVER_DOMAIN=jumpbox
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    ports:
      - 3000:3000
    volumes:
      - ${PWD}/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - 3100:3100

  tempo:
    image: grafana/tempo
    container_name: tempo
    command:
      - -config.file=/etc/tempo.yaml
    ports:
      - 3200:3200
      - 55680:55680
      - 55681:55681
      - 14250:14250
    volumes:
      - ${PWD}/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo

  kafka-lag-exporter:
    image: lightbend/kafka-lag-exporter:0.6.8
    container_name: kafka-lag-exporter
    hostname: kafka-lag-exporter
    restart: always
    #command: ["/opt/docker/bin/kafka-lag-exporter", "-Dconfig.file=/opt/docker/conf/application.conf", "-Dlogback.configurationFile=/opt/docker/conf/logback.xml"]
    command: ["/opt/docker/bin/kafka-lag-exporter", "-Dconfig.file=/opt/docker/conf/application.conf"]
    ports:
      - "8000:8000"
    volumes:
      - "${PWD}/kafka-lag-exporter:/opt/docker/conf/"

  # jaeger:
  #   image: jaegertracing/all-in-one
  #   container_name: jaeger
  #   hostname: jaeger
  #   restart: on-failure
  #   ports:
  #     - 9411:9411
  #     - 5775:5775/udp
  #     - 5778:5778
  #     - 6831:6831/udp
  #     - 6832:6832/udp
  #     - 16686:16686
  #     - 14268:14268
  #     - 14250:14250
  #     - 14270:14270
  #   environment:
  #     - COLLECTOR_ZIPKIN_HOST_PORT=9411
  #     - COLLECTOR_OTLP_ENABLED=true
      # - INGESTER_ENABLED=true
      # - SPAN_STORAGE_TYPE=kafka
      # - KAFKA_CONSUMER_BROKERS=172.31.62.53:9092
      # - KAFKA_CONSUMER_TOPIC=zipkin

  # jaeger-remote-storage:
  #   image: jaegertracing/jaeger-remote-storage
  #   container_name: jaeger-remote-storage
  #   ports:
  #     - 17271:17271
  #   environment:
  #     - SPAN_STORAGE_TYPE=memory
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:17270/ || exit 1"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3

  # jaeger-ingester:
  #   image: jaegertracing/jaeger-ingester
  #   container_name: jaeger-ingester
  #   command:
  #     - "--grpc-storage.server=jaeger-remote-storage:17271"
  #     - "--log-level=debug"
  #   restart: always
  #   environment:
  #     - SPAN_STORAGE_TYPE=grpc-plugin
  #     - KAFKA_CONSUMER_BROKERS=172.31.62.53:9092
  #     - KAFKA_CONSUMER_TOPIC=zipkin
  #     - KAFKA_CONSUMER_ENCODING=zipkin-thrift
  #     - KAFKA_CONSUMER_PROTOCOL_VERSION=3.4.0
  #   links:
  #     - jaeger-remote-storage
    
  # jaeger-query:
  #   image: jaegertracing/jaeger-query
  #   container_name: jaeger-query
  #   command:
  #     - "--grpc-storage.server=jaeger-remote-storage:17271"
  #     - "--log-level=debug"
  #   environment:
  #     - SPAN_STORAGE_TYPE=grpc-plugin
  #   ports:
  #     - "16686:16686"
  #     - "16687"
  #   restart: on-failure
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:16687/ || exit 1"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3 
  #   depends_on:
  #     jaeger-remote-storage:
  #       condition: service_healthy
  #   links:
  #     - jaeger-remote-storage

  # zipkin:
  #   image: openzipkin/zipkin
  #   container_name: zipkin
  #   hostname: zipkin
  #   ports:
  #     - 9411:9411

volumes:
  prometheus-data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind" 
      device: "/opt/monitoring/prometheus/data/"
  grafana-data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind" 
      device: "/opt/monitoring/grafana/data/"
  tempo-data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind" 
      device: "/opt/monitoring/tempo/"

networks:
  default:
    name: confluent
