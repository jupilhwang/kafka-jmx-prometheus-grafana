version: '3'
services:
  # otel-collector with qryn exporter
  otel-collector:
    image: ghcr.io/metrico/qryn-otel-collector:latest
    container_name: otel-collector
    restart: on-failure
    command: ["--config=/etc/otel-collector-config.yml", "${OTELCOL_ARGS}"]
    volumes:
      - ${PWD}/otel-collector/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
      - /home/ubuntu/works/cp-docker/kafka/logs:/var/log/kafka/:ro
    ports:
      - "4317:4317"     # OTLP gRPC receiver
      - "4318:4318"     # OTLP HTTP receiver
      - "14250:14250"   # Jaeger gRPC
      - "14268:14268"   # Jaeger thrift HTTP
      - "9411:9411"     # Zipkin port
      - "24224:24224"   # Fluent Forward
      # - "55679:55679"   # zpages extension
      # - "1888:1888"     # pprof extension
      # - "13133:13133"   # health_check extension

  qryn:
    image: qxip/qryn:latest
    container_name: qryn
    restart: unless-stopped
    ports:
      - 3100:3100
    environment:
      - CLICKHOUSE_SERVER=clickhouse
      - CLICKHOUSE_AUTH=admin:admin
      #- LOG_LEVEL=debug
      - NODE_OPTIONS="--max-old-space-size=4096"
      - ALERTMAN_URL=http://alertmanager:9093
    depends_on:
       clickhouse:
         condition: service_healthy

  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: clickhouse
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', '127.0.0.1:8123/ping']
      interval: 1s
      timeout: 1s
      retries: 30
    environment:
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=admin
    ports:
      - 8123:8123
      - 9000:9000
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      # - ${PWD}/clickhouse/opentelemetry_zipkin.sql:/docker-entrypoint-initdb.d/opentelemetry_zipkin.sql:ro

      - ${PWD}/clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.xml
      - ${PWD}/clickhouse/clickhouse-users.xml:/etc/clickhouse-server/users.xml
      # - ${PWD}/clickhouse/custom-function.xml:/etc/clickhouse-server/custom-function.xml
      # - ${PWD}/clickhouse/clickhouse-cluster.xml:/etc/clickhouse-server/config.d/cluster.xml
      # - ./clickhouse-storage.xml:/etc/clickhouse-server/config.d/storage.xml
      - ${PWD}/clickhouse/user_scripts:/var/lib/clickhouse/user_scripts/

  ## clickchouse web ui (tabix)
  # clickhouse-tabix:
  #   image: spoonest/clickhouse-tabix-web-client
  #   container_name: tabix
  #   restart: always
  #   ports:
  #       - "8124:80"
  #   depends_on:
  #       - clickhouse

  # alertmanager:
  #   image: prom/alertmanager
  #   container_name: alertmanager
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ${PWD}/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: always
    environment:
      # - GF_AUTH_ANONYMOUS_ENABLED=true
      # - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      # - GF_AUTH_DISABLE_LOGIN_FORM=true    
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      ## Set Grafana options
      - GF_ENABLE_GZIP=true
      - GF_USERS_DEFAULT_THEME=dark
      - GF_ALERTING_ENABLED=false
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_FEATURE_TOGGLES_ENABLE=traceToMetrics,publicDashboards,tempoApmTable
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-clickhouse-datasource,vertamedia-clickhouse-datasource
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=vertamedia-clickhouse-datasource
      # - GF_SERVER_PROTOCOL=http
      # - GF_SERVER_DOMAIN=jumpbox
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - 3000:3000
    volumes:
      - ${PWD}/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    command:
      - /bin/bash
      - -c
      - |
        ## Update Title
        sed -i 's|<title>\[\[.AppTitle\]\]</title>|<title>J Labs</title>|g' /usr/share/grafana/public/views/index.html
        ## Disable Connections
        sed -i 's|# feature2 = false|dataConnectionsConsole = false|g' /usr/share/grafana/conf/defaults.ini
        ## Update Help menu
        sed -i "s|\[\[.NavTree\]\],|nav,|g; \
          s|window.grafanaBootData = {| \
          let nav = [[.NavTree]]; \
          nav[nav.length -1]['subTitle'] = 'Application'; \
          window.grafanaBootData = {|g" \
          /usr/share/grafana/public/views/index.html
        ## Add News to the Mega Menu
        sed -i "s|window.grafanaBootData = {| \
          nav.push({\"id\":\"my-dashboard\",\"text\":\"Labs News\",\"icon\":\"play\",\"url\":\"/d/O4tc_E6Gz\",\"sortWeight\":-2000}); \
          window.grafanaBootData = {|g" \
          /usr/share/grafana/public/views/index.html
        ## Update Title
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|AppTitle="Grafana"|AppTitle="J's Labs"|g' {} \;
        ## Update Login Title
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|LoginTitle="Welcome to Grafana"|LoginTitle="Welcome to J Labs"|g' {} \;
        ## Remove Documentation, Support, Community in the Footer
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|\[{target:"_blank",id:"documentation".*grafana_footer"}\]|\[\]|g' {} \;
        ## Remove Edition in the Footer
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|({target:"_blank",id:"license",.*licenseUrl})|()|g' {} \;
        ## Remove Version in the Footer
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|({target:"_blank",id:"version",.*CHANGELOG.md":void 0})|()|g' {} \;
        ## Remove New Version is available in the Footer
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|({target:"_blank",id:"updateVersion",.*grafana_footer"})|()|g' {} \;
        ## Remove News icon
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|..createElement(....,{className:.,onClick:.,iconOnly:!0,icon:"rss","aria-label":"News"})|null|g' {} \;

        # ##################################################################
        # ## CLEANING Remove Native Data Sources
        # ##################################################################

        # ## Time series databases / Elasticsearch
        # RUN rm -rf /usr/share/grafana/public/app/plugins/datasource/elasticsearch
        # RUN rm -rf /usr/share/grafana/public/build/elasticsearch*
        # ## Time series databases / InfluxDB
        # RUN rm -rf /usr/share/grafana/public/app/plugins/datasource/influxdb
        # RUN rm -rf /usr/share/grafana/public/build/influxdb*

        ## Time series databases / Graphite
        rm -rf /usr/share/grafana/public/app/plugins/datasource/graphite
        rm -rf /usr/share/grafana/public/build/graphite*
        ## Time series databases / OpenTSDB
        rm -rf /usr/share/grafana/public/app/plugins/datasource/opentsdb
        rm -rf /usr/share/grafana/public/build/opentsdb*
        ## SQL / Microsoft SQL Server
        rm -rf /usr/share/grafana/public/app/plugins/datasource/mssql
        rm -rf /usr/share/grafana/public/build/mssql*

        ## Cloud / Azure Monitor
        rm -rf /usr/share/grafana/public/app/plugins/datasource/azuremonitor
        rm -rf /usr/share/grafana/public/build/azureMonitor*
        ## Cloud / CloudWatch
        rm -rf /usr/share/grafana/public/app/plugins/datasource/cloudwatch
        rm -rf /usr/share/grafana/public/build/cloudwatch*
        ## Cloud / Google Cloud Monitoring
        rm -rf /usr/share/grafana/public/app/plugins/datasource/cloud-monitoring
        rm -rf /usr/share/grafana/public/build/cloudMonitoring*
        ## Profiling / Parca
        rm -rf /usr/share/grafana/public/app/plugins/datasource/parca
        rm -rf /usr/share/grafana/public/build/parca*
        ## Profiling / Phlare
        rm -rf /usr/share/grafana/public/app/plugins/datasource/phlare
        rm -rf /usr/share/grafana/public/build/phlare*

        ## Others / Alertmanager
        rm -rf /usr/share/grafana/public/app/plugins/datasource/alertmanager
        rm -rf /usr/share/grafana/public/build/alertmanager*

        ## SQL / MySQL
        rm -rf /usr/share/grafana/public/app/plugins/datasource/mysql
        rm -rf /usr/share/grafana/public/build/mysql*

        # ## Distributed tracing / Tempo
        # RUN rm -rf /usr/share/grafana/public/app/plugins/datasource/tempo
        # RUN rm -rf /usr/share/grafana/public/build/tempo*

        ## Distributed tracing / Jaeger
        rm -rf /usr/share/grafana/public/app/plugins/datasource/jaeger
        rm -rf /usr/share/grafana/public/build/jaeger*

        ## Distributed tracing / Zipkin
        rm -rf /usr/share/grafana/public/app/plugins/datasource/zipkin
        rm -rf /usr/share/grafana/public/build/zipkin*


        ## Remove Cloud and Enterprise categories
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|.id==="enterprise"|.id==="notanenterprise"|g' {} \;
        find /usr/share/grafana/public/build/ -name *.js -exec sed -i 's|.id==="cloud"|.id==="notacloud"|g' {} \;

        # ##################################################################
        # ## CLEANING Remove Native Panels
        # ##################################################################

        # ## Alert list
        # RUN rm -rf /usr/share/grafana/public/app/plugins/panel/alertlist

        # ## Annotations list
        # RUN rm -rf /usr/share/grafana/public/app/plugins/panel/annolist

        # ## Dashboard list
        # RUN rm -rf /usr/share/grafana/public/app/plugins/panel/dashlist

        # ## News
        # RUN rm -rf /usr/share/grafana/public/app/plugins/panel/news

        # ## Table (old)
        # RUN rm -rf /usr/share/grafana/public/app/plugins/panel/table-old

        # ## Traces
        # RUN rm -rf /usr/share/grafana/public/app/plugins/panel/traces

        # ##################################################################

  # kafka-lag-exporter:
  #   image: lightbend/kafka-lag-exporter:0.6.8
  #   container_name: kafka-lag-exporter
  #   hostname: kafka-lag-exporter
  #   restart: always
  #   #command: ["/opt/docker/bin/kafka-lag-exporter", "-Dconfig.file=/opt/docker/conf/application.conf", "-Dlogback.configurationFile=/opt/docker/conf/logback.xml"]
  #   command: ["/opt/docker/bin/kafka-lag-exporter", "-Dconfig.file=/opt/docker/conf/application.conf"]
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - "${PWD}/kafka-lag-exporter:/opt/docker/conf/"

  nginx:
    image: nginx
    container_name: nginx
    depends_on: 
      - grafana
    ports:
      - 80:80
    volumes:
      - ${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf

volumes:
  grafana-data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind" 
      device: "/opt/monitoring/grafana/data/"
  clickhouse-data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/opt/monitoring/clickhouse/"

networks:
  default:
    name: confluent
